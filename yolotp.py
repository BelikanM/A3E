import os
import shutil
import tempfile
import streamlit as st
from ultralytics import YOLO
from PIL import Image
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from tqdm import tqdm
import zipfile

# -------------------------------
# CONFIGURATION STREAMLIT
# -------------------------------
st.set_page_config(page_title="YOLO Photogrammetry Sorter", layout="wide")

st.title("üì∏ YOLO Photogrammetry Optimizer")
st.markdown("""
Ce module r√©duit automatiquement le nombre d‚Äôimages d‚Äôun dossier photogramm√©trique
en ne gardant que les **angles de vue les plus uniques et informatifs**.

‚öôÔ∏è Bas√© sur **YOLOv8 + Similarit√© visuelle optimis√©e**, sans surcharger la m√©moire.
""")

# -------------------------------
# UPLOAD SECTION
# -------------------------------
uploaded_files = st.file_uploader(
    "üìÇ D√©posez vos images (plusieurs fichiers autoris√©s)",
    type=["jpg", "jpeg", "png"],
    accept_multiple_files=True
)

if not uploaded_files:
    st.info("üí° Uploadez vos images pour commencer.")
    st.stop()

# -------------------------------
# PARAM√àTRES
# -------------------------------
st.sidebar.header("‚öôÔ∏è Param√®tres du tri")
min_conf = st.sidebar.slider("Seuil de confiance YOLO", 0.1, 1.0, 0.5, 0.05)
keep_ratio = st.sidebar.slider("Proportion d‚Äôimages √† conserver (%)", 1, 100, 10, 1)
resize_dim = st.sidebar.selectbox("Taille de r√©duction des images", [64, 128, 256], index=1)

# -------------------------------
# CHARGEMENT YOLO
# -------------------------------
st.subheader("üîç Analyse en cours‚Ä¶")
st.write("Chargement du mod√®le YOLO...")

model = YOLO("yolov8n.pt")  # Mod√®le l√©ger
st.success("‚úÖ YOLO charg√© avec succ√®s.")

# Dossier temporaire pour le traitement
tmp_dir = tempfile.mkdtemp()
image_paths = []
for file in uploaded_files:
    file_path = os.path.join(tmp_dir, file.name)
    with open(file_path, "wb") as f:
        f.write(file.getbuffer())
    image_paths.append(file_path)

# -------------------------------
# EXTRACTION DE FEATURES OPTIMIS√âE
# -------------------------------
st.write("üîß Extraction des vecteurs d‚Äôimages...")
features = []

progress = st.progress(0)

for i, path in enumerate(image_paths):
    img = Image.open(path).convert("RGB").resize((resize_dim, resize_dim))
    np_img = np.array(img, dtype=np.float32) / 255.0

    # Moyenne + sous-√©chantillonnage pour une feature l√©g√®re mais significative
    small = np_img[::8, ::8, :].flatten()  # <1 Ko par image
    small /= np.linalg.norm(small) + 1e-8

    features.append(small)
    progress.progress((i + 1) / len(image_paths))

features = np.vstack(features)

# -------------------------------
# CALCUL DE SIMILARIT√â
# -------------------------------
st.subheader("üß† Calcul des similarit√©s entre images...")
similarity_matrix = cosine_similarity(features)

# Score d‚Äôunicit√© = 1 - moyenne de similarit√©
uniqueness_scores = 1 - np.mean(similarity_matrix, axis=1)
sorted_indices = np.argsort(-uniqueness_scores)

keep_count = max(1, int(len(image_paths) * keep_ratio / 100))
selected_indices = sorted_indices[:keep_count]

# -------------------------------
# EXPORT ET VISUALISATION
# -------------------------------
output_dir = os.path.join(tmp_dir, "selected_images")
os.makedirs(output_dir, exist_ok=True)

for idx in selected_indices:
    shutil.copy(image_paths[idx], os.path.join(output_dir, os.path.basename(image_paths[idx])))

st.success(f"‚úÖ S√©lection termin√©e : {keep_count} images gard√©es sur {len(image_paths)}")

# Afficher les premi√®res images retenues
st.subheader("üñºÔ∏è Aper√ßu des images s√©lectionn√©es")
cols = st.columns(5)
for i, idx in enumerate(selected_indices[:10]):
    with cols[i % 5]:
        st.image(image_paths[idx], caption=os.path.basename(image_paths[idx]), use_container_width=True)

# Cr√©ation d‚Äôun ZIP t√©l√©chargeable
zip_path = os.path.join(tmp_dir, "selected_images.zip")
with zipfile.ZipFile(zip_path, "w") as zipf:
    for img_name in os.listdir(output_dir):
        zipf.write(os.path.join(output_dir, img_name), img_name)

st.download_button(
    label="üì¶ T√©l√©charger les images s√©lectionn√©es",
    data=open(zip_path, "rb").read(),
    file_name="selected_images.zip",
    mime="application/zip"
)

st.caption("üíæ Traitement termin√©. Les fichiers temporaires seront supprim√©s automatiquement.")
